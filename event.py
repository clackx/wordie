from random import choices

from utils import try_send_message, try_edit_message_text, try_delete_message, \
    get_vote_kb, get_kb, dope_send_message, logger
from wordb import set_user, check_user, create_user, set_blank_user, \
    get_crux, check_word, get_word, set_word, get_word_info, set_word_info, up_word_usages, \
    get_games, add_game, get_moves, set_moves, get_stats, set_stats, set_inputs, get_inputs, \
    get_comm_word, add_comm_word, upd_comm_word


async def incoming(userid, userword):
    userword = userword.lower().replace('—ë', '–µ')
    if len(userword) < 5:
        num = 0
        try:
            num = int(userword)
        except Exception as err:
            logger.debug(err)
        if 0 < num < 1262:
            userword = await choose_word(userid, num)
            if userword:
                shared, entered, votepro, votecontra = await get_word_info(userword)
                entered += 1
                await set_word_info(userword, shared, entered, votepro, votecontra)
            return
        elif num > 1234:
            await try_send_message(userid, "–î–æ—Å—Ç—É–ø–Ω–æ 1234 —Å–ª–æ–≤–∞. 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ª–æ–∂–Ω—ã–º–∏.")
            return
        else:
            await try_send_message(userid, "–ú–∞–ª–æ–≤–∞—Ç–æ! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤.")
            return

    if userword == '—Å–¥–∞—é—Å—å':
        cruxword, cruxid, _, prevmess, _ = await get_crux(userid)
        if cruxword:
            moves = await add_moves(userid, cruxword, userword, 'üüß' * 5)
            await go_loose(userid, cruxword, cruxid, prevmess, moves)
        else:
            await try_send_message(userid, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    if len(userword) > 5:
        await try_send_message(userid, "–¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤.")
        return

    dictword = await check_word(userword)
    if not dictword:
        commword = await get_comm_word(userword)
        if commword:
            logger.debug(f"{userid} ?!?! userword {userword} :: {commword[0]} repeats")
            await try_send_message(userid, "–Ø —É–∂–µ –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ —Å–ª–æ–≤–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å :*")
            await upd_comm_word(userword, commword[0] + 1)
        else:
            logger.debug(f"{userid} ?!?! unknown userword :: {userword}")
            answers = ("–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?", "–≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ?",
                       "–ù–µ –∑–Ω–∞—é —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞", "–ò–∑–≤–∏–Ω–∏, –¥—Ä—É–≥, –Ω–µ –ø–æ–Ω–∏–º–∞—é")
            await try_send_message(userid, choices(answers)[0])
            await add_comm_word(userword)
        return
    else:
        word, usages = dictword
        usages += 1
        logger.debug(f"{'.' * 26} {word} {'|' * usages} repeats {usages} times")
        await up_word_usages(word, usages)

    cruxword, cruxid, chline, prevmess, state = await get_crux(userid)

    if not cruxword:
        await try_send_message(userid, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    if userword == cruxword:
        moves = await add_moves(userid, cruxword, userword, 'üü©' * 5)
        await go_win(userid, state, cruxword, cruxid, prevmess, moves)
        return

    b, g, y = ('‚¨ú', 'üü©', 'üü®Ô∏è')
    answer = ''
    state += 1
    for i in range(0, 5):
        if userword[i] == cruxword[i]:
            answer += g
            chline = chline.replace(userword[i], userword[i].capitalize())
        else:
            if userword[i] in cruxword:
                answer += y
                chline = chline.replace(userword[i], userword[i].capitalize())
            else:
                answer += b
                chline = chline.replace(userword[i], '_')

    moves = await add_moves(userid, cruxword, userword, answer)
    await try_send_message(userid, answer)
    if state > 6:
        await go_loose(userid, cruxword, cruxid, prevmess, moves)
        return
    await try_delete_message(userid, prevmess)
    statetext = state if state < 6 else '6 (–ø–æ—Å–ª–µ–¥–Ω–∏–π!)'
    messid = await try_send_message(userid, f'–•–æ–¥ {statetext}: ', markup=get_kb(chline))
    await set_user(userid, chline, messid, state)


async def start(userid, message):
    cruxid = 0
    is_shared = False
    if len(message.text) > 6:
        try:
            cruxid = int(message.text[7:])
            logger.debug(f'{userid} start with shared {cruxid}')
            is_shared = True
            await try_send_message(userid, f'–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–æ–º–µ—Ä {cruxid}!')
        except Exception as err:
            logger.debug(f"{userid} PARSE ERROR {cruxid} {message.text} {err}")

    result = await touch_user(userid, message.from_user)
    if result:
        await try_send_message(userid, '–ü—Ä–∏–≤–µ—Ç!')
        await show_help(userid)
    word = await choose_word(userid, cruxid)
    if word and is_shared:
        logger.debug(f'start with word {word}')
        shared, entered, votepro, votecontra = await get_word_info(word)
        shared += 1
        await set_word_info(word, shared, entered, votepro, votecontra)


async def touch_user(userid, from_user):
    is_user_exist = await check_user(userid)
    if is_user_exist:
        return 0
    uname = from_user.username if from_user.username else ''
    # locale = from_user.language_code if from_user.language_code else 'ru'
    fname = from_user.first_name if from_user.first_name else ''
    lname = from_user.last_name if from_user.last_name else ''
    flname = f'{fname} {lname}'.lstrip().rstrip()[:42]
    nickname = '@' + uname
    await create_user(userid, flname, nickname)
    return 1


async def choose_word(userid, cruxid=0):
    cruxword, _, _, _, _ = await get_crux(userid)
    if cruxword:
        await try_send_message(userid, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.\n'
                                       '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "—Å–¥–∞—é—Å—å", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç.')
        return
    games_ids = await get_games(userid)
    await dope_send_message(f": : {userid} played {len(games_ids)} games, enter {cruxid}")
    knowncruxes = [i[0] for i in games_ids]
    if cruxid in knowncruxes:
        await try_send_message(userid, '–í—ã —É–∂–µ –æ—Ç–≥–∞–¥—ã–≤–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ')
        return

    if not cruxid:
        allowedcruxes = [i for i in range(1, 1234) if i not in knowncruxes]
        if len(allowedcruxes) == 1133:
            await try_send_message(userid, "–û–≥–æ, –≤—ã —Å—ã–≥—Ä–∞–ª–∏ 100 —Å–ª–æ–≤! –≠—Ç–æ —Ü–µ–ª—ã—Ö 8% –æ—Ç 1234 :)")
        if len(allowedcruxes) == 926:
            await try_send_message(userid, "–í—ã —Å—ã–≥—Ä–∞–ª–∏ —á–µ—Ç–≤–µ—Ä—Ç—É—é —á–∞—Å—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤!")
        if len(allowedcruxes) == 823:
            await try_send_message(userid, "–í—ã —Å—ã–≥—Ä–∞–ª–∏ —Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —Å–ª–æ–≤!!")
        if len(allowedcruxes) == 617:
            await try_send_message(userid, "–í—ã —Å—ã–≥—Ä–∞–ª–∏ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Å–µ—Ö —Å–ª–æ–≤!!!")
        if len(allowedcruxes) == 100:
            await try_send_message(userid, "–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 100 —Å–ª–æ–≤ o_0")
        if len(allowedcruxes) == 10:
            await try_send_message(userid, "–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 10 —Å–ª–æ–≤...")
        if len(allowedcruxes) == 0:
            await try_send_message(userid, "–í—ã —Å—ã–≥—Ä–∞–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @timeclackx")
            return
        cruxid = choices(allowedcruxes)[0]

    await try_send_message(userid, f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ‚Ññ{cruxid}\n–•–æ–¥ 1:  –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤")
    await set_blank_user(userid)
    word = await get_word(cruxid)
    await set_word(userid, word, cruxid)
    await add_game(userid, cruxid, word)
    return word


async def add_moves(userid, cruxword, word, move):
    data = await get_moves(userid, cruxword)
    moves, words = data if data else ('', '')
    moves = moves + ' ' + move if moves else move
    words = words + ' ' + word if words else word
    await set_moves(userid, cruxword, moves, words)
    return moves


async def go_inputs(userid, chosen):
    inputs = await get_inputs(userid)
    if not inputs:
        inputs = ''
    _, _, charline, prevmess, state = await get_crux(userid)
    inputs += chosen
    letters = inputs.upper() if len(inputs) < 5 else ''
    await try_edit_message_text(f'–•–æ–¥ {state}: {letters}', userid, prevmess, markup=get_kb(charline))

    if len(inputs) > 4:
        await set_inputs(userid, '')
        await try_send_message(userid, f'–•–æ–¥ {state}: {inputs.capitalize()}')
        await incoming(userid, inputs)
    else:
        await set_inputs(userid, inputs)


async def go_loose(userid, cruxword, cruxid, prevmess, moves):
    await try_send_message(userid, f'–í–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ: {cruxword}')
    await try_delete_message(userid, prevmess)
    text = f'@WordieRobot ‚Ññ{cruxid} X/6 \n\n' + '\n'.join(moves.split())
    await try_send_message(userid, text, markup=get_vote_kb(cruxword))
    games, wins, streaks, maxstreak, points, maxpoints = await get_stats(userid)
    games += 1
    avrgpoints = points * 10 // games / 10
    await try_send_message(userid, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n–í–∞—à–∏ –æ—á–∫–∏: {points}\n–°—Ä–µ–¥–Ω–µ–µ: {avrgpoints}'
                                   '\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats\n\n–ù–æ–≤–∞—è –∏–≥—Ä–∞ /start')
    await set_blank_user(userid)
    await set_stats(userid, games, wins, 0, maxstreak, points, maxpoints)
    await try_send_message(userid, f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–ª–æ–≤–æ–º —Å –¥—Ä—É–≥–æ–º: t.me/WordieRobot?start={cruxid}")


async def go_win(userid, state, cruxword, cruxid, prevmess, moves):
    await try_delete_message(userid, prevmess)
    text = f'@WordieRobot ‚Ññ{cruxid} {state}/6 \n\n' + '\n'.join(moves.split())
    await try_send_message(userid, text, markup=get_vote_kb(cruxword))
    games, wins, streaks, maxstreak, points, maxpoints = await get_stats(userid)
    bonus = streaks if streaks < 10 else 10
    winpoints = 70 - (10 * state) + bonus
    points += winpoints
    wins += 1
    games += 1
    streaks += 1
    if maxstreak < streaks:
        maxstreak = streaks
    if maxpoints < winpoints:
        maxpoints = winpoints
    avrgpoints = points * 10 // games / 10
    await try_send_message(userid, f'–ü–æ–±–µ–¥–∞!\n+ {winpoints} –æ—á–∫–æ–≤\n–í–∞—à–∏ –æ—á–∫–∏: {points}\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avrgpoints}'
                                   '\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats\n\n–ù–æ–≤–∞—è –∏–≥—Ä–∞ /start')
    await set_blank_user(userid)
    await set_stats(userid, games, wins, streaks, maxstreak, points, maxpoints)
    await try_send_message(userid, f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–ª–æ–≤–æ–º —Å –¥—Ä—É–≥–æ–º: t.me/WordieRobot?start={cruxid}")


async def go_vote(userid, word, vote, text, message_id):
    shared, entered, votepro, votecontra = await get_word_info(word)
    if vote == 'pro':
        votepro += 1
    else:
        votecontra += 1
    await set_word_info(word, shared, entered, votepro, votecontra)
    await try_edit_message_text(text, userid, message_id)


async def show_help(userid):
    text = '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ: —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤, –∞ –≤—ã —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞ 6 —à–∞–≥–æ–≤.\n' \
           '–í –º–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ –æ–∫–æ–ª–æ 4—Ö —Ç—ã—Å—è—á –ø—è—Ç–∏–±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –Ω–æ –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å —è –±—É–¥—É —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ.\n\n' \
           '–ò—Ç–∞–∫, –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–Ω–µ —Å–ª–æ–≤–∞, –∞ —è –¥–∞—é –≤–∞–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω—ã—Ö –ø–ª–∏—Ç–æ–∫:\n' \
           '<i>—Å–µ—Ä–∞—è</i> ‚¨ú, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç,\n' \
           '<i>–∂—ë–ª—Ç–∞—è</i> üü®Ô∏è, –µ—Å–ª–∏ –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å—Ç–æ–∏—Ç –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ,\n' \
           '–∏ <i>–∑–µ–ª—ë–Ω–∞—è</i> üü©, –µ—Å–ª–∏ –±—É–∫–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–µ —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ, —á—Ç–æ –∏ –±—É–∫–≤–∞ –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º. \n\n' \
           '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ —Å–ª–æ–≤–æ "<i>–∫–æ–º–∞—Ä</i>", –∞ —è –≤–∞–º –æ—Ç–≤–µ—á—É ‚¨úÔ∏èüü©üü®Ô∏è‚¨úÔ∏èüü®Ô∏è, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, ' \
           '—á—Ç–æ –±—É–∫–≤–∞ "<b>–æ</b>" –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –±—É–¥–µ—Ç –≤—Ç–æ—Ä–æ–π, –±—É–∫–≤—ã "<b>–º</b>" –∏ "<b>—Ä</b>" –≥–¥–µ-—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è, ' \
           '–∞ –±—É–∫–≤—ã "<b>–∫</b>" –∏ "<b>–∞</b>" –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n' \
           '–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –≤–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É, ' \
           '—á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –ø–æ–ª–æ–º–∞–ª –Ω–∞–¥ –Ω–∏–º –≥–æ–ª–æ–≤—É :) –í—ã –∏ —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–π –Ω–æ–º–µ—Ä –¥–æ 1234–≥–æ.\n\n' \
           '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –ø–∏—à–∏—Ç–µ @timeclackx\n\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!'
    await try_send_message(userid, text)
